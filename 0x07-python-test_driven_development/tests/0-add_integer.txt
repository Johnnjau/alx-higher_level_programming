<<<<<<< HEAD
# test_add_integer.txt

from 0-add_integer import add_integer
import unittest

class TestAddInteger(unittest.TestCase):
    """
    Defines test cases for the add_integer function.
    """

    def test_simple_addition(self):
        self.assertEqual(add_integer(2, 3), 5)
        self.assertEqual(add_integer(2, -3), -1)
        self.assertEqual(add_integer(-1, 2), 1)
        self.assertEqual(add_integer(2, 2), 4)

    def test_default_second_argument(self):
        self.assertEqual(add_integer(2), 100)

    def test_floats(self):
        self.assertEqual(add_integer(2.0, 3.0), 5)
        self.assertEqual(add_integer(2.9, 0.2), 2)
        self.assertEqual(add_integer(-2.9, -0.2), -2)
        self.assertEqual(add_integer(2.3, -3), -1)

    def test_type_errors(self):
        with self.assertRaises(TypeError):
            add_integer("hello", 3)
            add_integer(2, "hello")
            add_integer(None)
            add_integer(2.3, None)
            add_integer('math', 4)
            add_integer(5, 'math')
            add_integer('math', 'math')

    def test_overflow_and_nan(self):
        with self.assertRaises(OverflowError):
            add_integer(float('inf'))
            add_integer(2, float('inf'))

        with self.assertRaises(ValueError):
            add_integer(float('nan'))
            add_integer(2, float('nan'))

    def test_integer_casting(self):
        self.assertEqual(add_integer(20.6, 10), 30)
        self.assertEqual(add_integer(10, 20.6), 30)
        self.assertEqual(add_integer(int(10.3), 5), 15)

    def test_missing_arguments(self):
        with self.assertRaises(TypeError):
            add_integer()

if __name__ == "__main__":
    unittest.main()
    
=======
# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function also works with floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

>>>>>>> c99d2c489ff95f8b804e53d1fd225937d0ac6d47
